#!/bin/sh
# ATTENTION: don't run locally, will overwrite your .oscrc!!!
#
# Input JSON from STDIN
# {
#   "source": {
#     "api": "https://api.opensuse.org",
#     "project": "home:mmanno",
#     "package": "restic",
#     "username": "username",
#     "password": "password"
#   },
#   "version": { "ref": "61cebf" }
# }

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > $payload <&0

parse_source_config
create_oscrc

DESTINATION_DIR=$1

cd $DESTINATION_DIR

CUR=$(osc log --csv $OSC_PROJECT/$OSC_PACKAGE | head -1 | cut -d\| -f4)

if [ "$CUR" = "$VERSION" ]; then
  osc co $OSC_PROJECT $OSC_PACKAGE
else
  echo "Warning: checking out a specific version, you need to run 'osc up' before committing"
  osc co -r $VERSION $OSC_PROJECT $OSC_PACKAGE
fi

cd $OSC_PROJECT/$OSC_PACKAGE
# filter out any possible " quotes from the commit message
META=$(osc log --csv -r $VERSION | sed -e 's/\"//g')


# The script must emit the fetched version, and may emit metadata as a list of key-value pairs. This data is intended for public consumption and will make it upstream, intended to be shown on the build's page.
cat >&3 <<EOF
{
  "version": { "ref": "$VERSION" },
  "metadata": [
    { "name": "revision", "value": "$(echo $META | cut -d\| -f1)" },
    { "name": "author", "value": "$(echo $META | cut -d\| -f2)" },
    { "name": "date", "value": "$(echo $META | cut -d\| -f3)" },
    { "name": "version", "value": "$(echo $META | cut -d\| -f5)" },
    { "name": "comment", "value": "$(echo $META | cut -d\| -f6)" }
  ]
}
EOF

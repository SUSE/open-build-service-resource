#!/bin/bash
# ATTENTION: don't run locally, will overwrite your .oscrc!!!
#
# Input JSON from STDIN
# {
#   "params": {
#     "remove_files": ["test.tmp", "build-stamp"],
#     "build": {
#       "repository": "openSUSE_Leap_42.1",
#       "arch": "x86_64"
#     },
#     "commit": {
#       "message": "new release",
#       "add_files": ["*.tgz"]
#     }
#   },
#   "source": {
#     "api": "https://api.opensuse.org",
#     "project": "home:mmanno",
#     "package": "restic",
#     "username": "username",
#     "password": "password"
#   }
# }

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > $payload <&0

parse_source_config
create_oscrc

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

resource=$(jq -r '.params.from // ""' < $payload)
build=$(jq -r '.params.build // ""' < $payload)
repository=$(jq -r '.params.build.repository // ""' < $payload)
arch=$(jq -r '.params.build.arch // ""' < $payload)
commit_message=$(jq -r '.params.commit.message // ""' < $payload)
files_count=$(jq -r '.params.remove_files | length' < $payload)

if [ -z "$resource" ]; then
  echo "invalid payload (missing resource)"
  exit 1
fi

cd $source/$resource

for i in $(seq 0 $(expr "$files_count" - 1)); do
  file=$(jq -r ".params.remove_files[$i]" < $payload)
  osc rm -f "$file"
done

if [ ! -z "$build" ]; then
  osc build --trust-all-projects $repository $arch
fi

if [ ! -z "$commit_message" ]; then
  files_count=$(jq -r '.params.commit.add_files | length' < $payload)
  for i in $(seq 0 $(expr "$files_count" - 1)); do
    file=$(jq -r ".params.commit.add_files[$i]" < $payload)
    osc add "$file"
  done
  osc commit -m"$commit_message"
fi

# The script must emit the resulting version of the resource.
# also filter out any possible " quotes from the commit message
META=$(osc log --csv | head -1 | sed -e 's/\"//g')
VERSION=$(echo $META | cut -d\| -f4)
cat >&3 <<EOF
{
  "version": { "ref": "$VERSION" },
  "metadata": [
    { "name": "revision", "value": "$(echo $META | cut -d\| -f1)" },
    { "name": "author", "value": "$(echo $META | cut -d\| -f2)" },
    { "name": "date", "value": "$(echo $META | cut -d\| -f3)" },
    { "name": "version", "value": "$(echo $META | cut -d\| -f5)" },
    { "name": "comment", "value": "$(echo $META | cut -d\| -f6)" }
  ]
}
EOF
